#! /bin/sh


[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "$1" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################

MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"


setup_test()
{
#   echo "**********************************************" >&2
#   echo "**********************************************" >&2
#   echo "**********************************************" >&2
#   echo "**********************************************" >&2
#   echo "**********************************************" >&2
#   env >&2
#   echo "**********************************************" >&2
#   echo "**********************************************" >&2
#   echo "**********************************************" >&2
#   echo "**********************************************" >&2
#   echo "**********************************************" >&2

   case "${PROJECT_DIALECT}" in
      c|objc)
         MULLE_VIRTUAL_ROOT="" exekutor mulle-sde ${MULLE_SDE_FLAGS} \
                                          ${MULLE_TECHNICAL_FLAGS} \
                                          init -d test \
                                          -r "mulle-sde/${PROJECT_DIALECT}-test" \
                                          none
      ;;

      "")
         fail "Empty PROJECT_DIALECT"
      ;;

      *)
         fail "Unsupported dialect \"${PROJECT_DIALECT}\""
      ;;
   esac
}


main()
{
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         --f)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         --marks)
            shift
         ;;

         -*)
            fail "unknown flag \"$1\""
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   setup_test "$@"
}


main "$@"
