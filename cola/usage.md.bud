## Testing with test support files

Run the test with `mulle-test`. The following graphic represents the control
flow and the operations performed to check if a test (in this case named "a.c")
passes or fails:

![flow.svg](dox/flow.svg)

Test support files are optional. If a file is not present, the respective
matching operation is not performed.


| Extension            | Description
|----------------------|----------------------
| `<name>.stdout`      | Contents must match exactly standard output of the test executable
| `<name>.stdin`       | File fed to standard input of the test executable
| `<name>.stderr`      | Contents must match exactly standard error of the test executable
| `<name>.errors`      | Each line must grep for test diagnostics
| `<name>.ccdiag`      | Each line must grep for compiler diagnostics
| `<name>.environment` | Environment variables to set for test executable
| `<name>.diff`        | An executable script to used instead of the default`diff`


If for a test there is no support file `<name>.<ext>` found, a file with the
name `default.<ext>` will be searched for instead.

### stdin, stdout, stderr

These files are treated as binaries. Changes in whitespace will be detected,
and will produce a warning.

### ccdiag

Each line is used as a pattern in an `grep -E` statement. An example file to
expect a compiler warning could be:

```
may not respond to
```

### errors

Usually a test that returns non-nil is assumed to have failed. If an `errors`
file is present, failure is the expected outcome. The contents of the file
are `grep -E`ed with the test output.


### environment

The contents of this file are loaded before executing the test.

Example:

``` bash
export FOO="1848"
```

### diff

This is an executable or script, that is used to compare the output of the
test with the expected files `stdout` and `stderr`. Typical use is to remove
some content before diffing such as:

```
#! /bin/sh
# remove all lines starting from "__DATE__" and ending with ");"
sed -e '/__DATE__/,/);/d'  | diff "$@"
```

