#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = "YES" -o "${MULLE_TEST_TRACE}" = "YES" ] && set -x && : "$0" "$@"


MULLE_TEST_VERSION="4.0.2"

# version is in mulle-test-env


usage()
{
   cat <<EOF >&2
Usage:
   ${MULLE_EXECUTABLE_NAME} [flags] <command> <options> -- <build> -- <run>

   Run tests. Commands take options. Some commands take additional build and
   run options. Notice the -- separator.

   Prepare your test environment with \'mulle-sde craft\'.


Flags:
EOF

   (
      options_technical_flags_usage "             : "
      cat <<EOF
   --dir-name <name> : specify test directory name (default: test)
EOF
   ) | sort >&2


   cat <<EOF >&2

Commands:
   build                    : force rebuild of project
   clean                    : remove dependency, build and all .exe files
   init                     : setup a test project for the current project
   run                      : run tests
   test-dir                 : locate test folder

Environment:
   MULLE_TEST_CONFIGURATION : configuration to compile files (Debug)
   MULLE_TEST_DIR           : tests direcetory (test)
   PROJECT_DIALECT          : dialect of the tests, can be objc
   PROJECT_EXTENSIONS       : file extensions of the test files
   PROJECT_LANGUAGE         : language of the tests (c)

EOF

   exit 1
}


cd_test_dir()
{
   log_entry "cd_test_dir" "$@"

   local testdir

   # shellcheck source=src/mulle-test-locate.sh
   . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-locate.sh"

   local RVAL

   if ! r_locate_test_dir "${MULLE_TEST_DIR:-test}"
   then
      fail "Did not find a \"${MULLE_TEST_DIR:-test}\" directory (${MULLE_USER_PWD})"
   fi

   exekutor cd "${RVAL}" || return 1
}


build_run()
{
   log_entry "build_run" "$@"

   local cmd

   if [ -x "build-test" ]
   then
      cmd="exekutor ./build-test ${MULLE_TECHNICAL_FLAGS}"
   else
      # shellcheck source=src/mulle-test-run.sh
      . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-build.sh"

      cmd="build_main"
   fi

   ${cmd} "$@"
}


stage_run()
{
   log_entry "stage_run" "$@"

   local cmd

   if [ -x "run-test" ]
   then
      cmd="exekutor ./run-test ${MULLE_TECHNICAL_FLAGS}"
   else
      # shellcheck source=src/mulle-test-run.sh
      . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-run.sh"

      cmd="run_main"
   fi

   ${cmd} "$@"
}


exec_in_subshell_if_needed()
{
   log_entry "build_run" "$@"

   if [ "${MULLE_VIRTUAL_ROOT}" != "${PWD}" ]
   then
      if [ ! -z "${MULLE_TEST_DIR}" ]
      then
         exekutor cd "${MULLE_TEST_DIR}" || exit 1
      fi
      exekutor exec mulle-sde ${MULLE_TECHNICAL_FLAGS} \
                              ${MULLE_SDE_FLAGS} \
                              run mulle-test "$@"
   else
      log_debug "Already in proper subshell"
   fi
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NONE"
   local MULLE_FLAG_IGNORE_GRAVEYARD="NO"

   # technical flags
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   local MULLE_FLAG_DEFER="DEFAULT"
   local FLAG_OUTSIDE_ENV="NO"

   local BUILD_FLAGS="-f"
   local BUILD_OPTIONS="--clean"
   local RUN_FLAGS
   local RUN_OPTIONS
   local RVAL

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         -d|--dir-name)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            MULLE_TEST_DIR="$1"
         ;;

         --)
            break
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   MULLE_TEST_CONFIGURATION=${MULLE_TEST_CONFIGURATION:-Debug}

   local cmd="${1:-run}"
   [ $# -ne 0 ] && shift

   case "${cmd}" in
      build)
         cd_test_dir  || exit 1

         exec_in_subshell_if_needed "${cmd}" "$@"

         mulle-sde clean "${PROJECT_NAME}" &&
         build_run "$@"
      ;;

      clean)
         cd_test_dir || exit 1

         exec_in_subshell_if_needed "${cmd}" "$@"

         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-clean.sh"

         test_clean_main "$@"
      ;;

      init)
         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-init.sh"
         test_init_main "$@"
      ;;

      run)
         cd_test_dir || exit 1

         exec_in_subshell_if_needed  ${MULLE_TECHNICAL_FLAGS} run "$@"

         if [ ! -d dependency ]
         then
            build_run "$@" || exit 1
         fi
         stage_run "$@"
      ;;

      test-dir)
         # shellcheck source=src/mulle-test-locate.sh
         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-locate.sh"

         r_locate_main "$@"
         echo "${RVAL}"
      ;;

      *)
         log_error "Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}


#
#
#
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
   [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
      echo "mulle-bashfunctions-env not installed" >&2 && \
      exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   local _libexec_dir

   _get_libexec_dir "$0" "mulle-test" "mulle-test-run.sh"

   MULLE_TEST_LIBEXEC_DIR="${_libexec_dir}"

   #
   # minimal setup exit
   #
   if [ "$#" -eq 1 ]
   then
      case "$1" in
         "libexec-dir")
            echo "${MULLE_TEST_LIBEXEC_DIR}"
            exit 0
         ;;
      esac
   fi

   set -o pipefail
}


# mingw stuff
case "$PATH" in
   '\\'*)
      PATH="${PATH//\\/\/}"
   ;;
esac

_init "$@"
main "$@"
