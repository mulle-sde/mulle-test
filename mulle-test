#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
if [ "${TRACE}" = "YES" ]
then
   set -x
fi


VERSION_MAJOR="3"

# version is in mulle-test-env

trap_fail()
{
   exit 1
}


usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_EXECUTABLE_NAME} [flags] [command]

   Run tests.

Flags:
EOF

   options_technical_flags_usage

   cat <<EOF

Commands:
   init       :  prepare project for mulle-test
   test       :  build and run tests (default)
EOF

   if [ "${verbose}" = "NO" ]
   then
      cat <<EOF

      (use mulle-test -v help to show more commands and flags)
EOF
   fi

   exit 1
}


#
# >>> init
# TODO: need styles for different languages
#
write_build_script()
{
   local name="$1"
   local lang="$2"
   local version="$3"

   cat <<EOF
#!/usr/bin/env bash

PROJECTDIR="\`dirname "\$PWD"\`"
PROJECTNAME="${name}"
LIBRARY_SHORTNAME="${name}"
ADDITIONAL_LIBS=

MULLE_TEST_LIBEXEC_DIR="\`mulle-test-env libexec-dir ${version}\`" || exit 1

. "\${MULLE_TEST_LIBEXEC_DIR}/test-${lang}-common.sh"
. "\${MULLE_TEST_LIBEXEC_DIR}/test-tools-common.sh"
. "\${MULLE_TEST_LIBEXEC_DIR}/test-staticlib-common.sh"
. "\${MULLE_TEST_LIBEXEC_DIR}/build-test-common.sh"
EOF
}


write_test_script()
{
   local name="$1"
   local lang="$2"
   local version="$3"

   cat <<EOF
#!/usr/bin/env bash

PROJECTDIR="\`dirname "\$PWD"\`"
PROJECTNAME="${name}"
LIBRARY_SHORTNAME="${name}"
ADDITIONAL_LIBS=

MULLE_TEST_LIBEXEC_DIR="\`mulle-test-env libexec-dir ${version}\`" || exit 1

. "\${MULLE_TEST_LIBEXEC_DIR}/test-${lang}-common.sh"
. "\${MULLE_TEST_LIBEXEC_DIR}/test-tools-common.sh"
. "\${MULLE_TEST_LIBEXEC_DIR}/test-staticlib-common.sh"
. "\${MULLE_TEST_LIBEXEC_DIR}/run-test-common.sh"
EOF
}


init_main()
{
   local directory
   local parent
   local name
   local lang

   if [ $# -ge 1 ]
   then
      directory="$1"
      name="`basename -- "${directory}"`"
      shift
   else
      while :
      do
         directory="`pwd`"
         name="`basename -- "${directory}"`"
         case "${name}" in
            mulle-test|tests)
               cd ..
               continue
            ;;
         esac
         break
      done
   fi

   if [ $# -ge 1 ]
   then
      name="$1"
      shift
   fi

   lang="c"
   if [ $# -ge 1 ]
   then
      lang="$1"
      shift
   fi

   cd "${directory}" || fail "missing directory \"${directory}\""
   mkdir "tests" 2> /dev/null

   if [ ! -f tests/build-test.sh ]
   then
      write_build_script "${name}" "${lang}" "${VERSION_MAJOR}" > tests/build-test
      chmod 755 tests/build-test
   else
      echo "tests/build-test already exists" >&2
   fi

   if [ ! -f tests/build-test.sh ]
   then
      write_test_script "${name}" "${lang}" "${VERSION_MAJOR}" > tests/run-test
      chmod 755 tests/run-test
   else
      echo "tests/run-test already exists" >&2
   fi
}



#
# init done
#

locate_tests()
{
   log_entry "locate_tests" "$@"

   local testdir
   local rootdir

   # ez shortcut
   testdir="${TESTS:-tests}"
   if [ -x "${testdir}/run-test" ]
   then
      echo "${testdir}"
      return
   fi

   rootdir="${MULLE_VIRTUAL_ROOT:-`pwd -P`}"

   local old

   old="${IFS}"
   IFS="
"
   #
   # find the nearest tests folder, with a run-test.sh
   # executable. The awk emits "#pathComponents path"
   # and then it get sorted. We run breadth first
   # search this way
   #
   for testdir in `find "${rootdir}" -name tests -type d -print | \
                     awk -F'/' '{print NF " " $0}' | \
                     sort -n | \
                     sed 's/[0-9]* \(.*\)/\1/'`
   do
      IFS="${old}"

      case "${testdir}" in
         ${rootdir}/stashes/*)
            # ignore "top level" stashes
         ;;

         *)
            if [ -x "${testdir}/run-test" ]
            then
               echo "${testdir}"
               return
            fi
         ;;
      esac
   done

   IFS="${old}"
}


test_main()
{
   log_entry "test_main" "$@"

   # check this first
   local testdir
   local userrel

   testdir="`locate_tests`"
   userrel="`symlink_relpath "${testdir}" "$PWD"`/"

   if [ -z "${testdir}" ]
   then
      fail "Don't know how to run tests (tests/run-test is missing)"
   fi

   if [ "${OPTION_DONT_BUILD}" = "NO" ]
   then
      if [ -x "${testdir}/build-test" ]
      then
         (
            exekutor cd "${testdir}"
            TEST_PATH_PREFIX="${userrel}" \
               eval_exekutor "./build-test" \
                                 ${TEST_BUILD_OPTIONS} "$@"
         ) || exit 1
      else
         if [ -f "${testdir}/build-test" ]
         then
            fail "build-test.sh is not executable"
         fi
         log_verbose "No build-test found"
      fi
   else
      log_fluff "Build skipped on demand"
   fi

   local cmdline
   local relative

   #
   # improve relative paths for change to "${testdir}"
   #
   while [ $# -ne 0 ]
   do
      # grab off options
      case "$1" in
         -j)
            cmdline="`concat "${cmdline}" "$1"`"
            shift
            cmdline="`concat "${cmdline}" "$1"`"
         ;;

         -*)
            cmdline="`concat "${cmdline}" "$1"`"
         ;;

         *)
            relative="`symlink_relpath "${PWD}/$1" "${testdir}"`"
            cmdline="`concat "${cmdline}" "'${relative}'"`"
         ;;
      esac
      shift
   done

   (
      exekutor cd "${testdir}"
      eval_exekutor "./run-test" --path-prefix "'${userrel}'" \
                                    "${TEST_OPTIONS}" \
                                    "${cmdline}"
   ) || exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NONE"
   local MULLE_FLAG_IGNORE_GRAVEYARD="NO"

   # technical flags
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   local MULLE_FLAG_DEFER="DEFAULT"
   local FLAG_OUTSIDE_ENV="NO"

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         -h|--help)
            usage "${MULLE_TRACE}"
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done


   options_setup_trace "${MULLE_TRACE}"

   local cmd

   cmd="$1"

   MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE_NAME} ${cmd}"
   [ $# -eq 0 ] || shift

   case "${cmd:-test}" in
      init)
         init_main "$@"
      ;;

      test)
         test_main "$@"
      ;;

      help)
         usage "${MULLE_TRACE}"
      ;;

      *)
         log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}


#
#
#

_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      if [ -z "`command -v "${executablepath}"`" ]
      then
          echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH (not installed ?)" >&2
      else
         echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
      fi
      exit 1
   fi

   local failmsg

   failmsg="failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-string.sh"   || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-logging.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-logging.sh"  || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-exekutor.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-exekutor.sh" || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-options.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-options.sh"  || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-path.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh"     || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-file.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh"     || fail "${failmsg}"


   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail

   MULLE_ARGUMENTS="$*"
}


_init "$@" # needs params
main "$@"
