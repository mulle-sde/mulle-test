#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = "YES" -o "${MULLE_TEST_TRACE}" = "YES" ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="5.3.0"

# version is in mulle-test-env


usage()
{
   cat <<EOF >&2
Usage:
   ${MULLE_EXECUTABLE_NAME} [flags] <command> <options> -- <build> -- <run>

   Run tests. Commands take options. Some commands take additional build and
   run options. Notice the -- separator.

   Prepare your test environment with \'mulle-sde craft\'.


Flags:
EOF

   (
      options_technical_flags_usage "                : "
      cat <<EOF
   --dir-name <name>    : specify test directory name (default: test)
   --no-sanitizer       : no sanitizer
   --sanitize-address   : use address sanitizer to craft and run
   --sanitize-thread    : use thread sanitizer to craft and run
   --sanitize-undefined : use undefined sanitizer to craft and run
   --testallocator      : use mulle-testallocator to run (default)
   --valgrind           : use valgrind to run
   --zombie             : use zombie sanitizer ro run

EOF
   ) | sort >&2


   cat <<EOF >&2

Commands:
   clean                : remove dependency, kitchens and exe files
   craft                : force rebuild of project, then run tests
   init                 : setup a test project for the current project
   recraft              : clean all, then craft
   run                  : run tests, crafts beforehand if needed
   rerun                : run failing tests again
   test-dir             : locate test folder

Environment:
   MULLE_TEST_DIR       : tests directory (test)
   PROJECT_DIALECT      : dialect of the tests, can be objc
   PROJECT_EXTENSIONS   : file extensions of the test files
   PROJECT_LANGUAGE     : language of the tests (c)

EOF

   exit 1
}


#
# 0 OK
# 4 its a script
#
cd_test_dir()
{
   log_entry "cd_test_dir" "$@"

   # shellcheck source=src/mulle-test-locate.sh
   . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-locate.sh"

   MULLE_TEST_DIR="${MULLE_TEST_DIR:-test}"
   r_locate_test_dir "${MULLE_TEST_DIR}"
   rval=$?

   if [ $rval -eq 1 ]
   then
      fail "Did not find a \"${MULLE_TEST_DIR}\" directory (${MULLE_USER_PWD})
${C_INFO}Initialize tests with:
${C_RESET_BOLD}   mulle-sde test init"
   fi

   r_absolutepath "${RVAL}"
   MULLE_TEST_DIR="${RVAL}"
   if [ -d "${MULLE_TEST_DIR}/.mulle/share/sde" -a ! -d "${MULLE_TEST_DIR}/.mulle/share/test" ]
   then
      fail "\"${MULLE_TEST_DIR}\" is not a mulle-sde project marked for mulle-test"
   fi

   if [ "${PWD}" != "${MULLE_TEST_DIR}" ]
   then
      log_fluff "Going to test directory \"${MULLE_TEST_DIR}\" ($PWD)"
      exekutor cd "${MULLE_TEST_DIR}" || exit 1
   fi

   return $rval
}


test_do_craft()
{
   log_entry "test_do_craft" "$@"

   local cmd

   if [ -x "./craft-test" ]
   then
      cmd="exekutor ./craft-test ${MULLE_TECHNICAL_FLAGS}"
   else
      if [ -x "./build-test" ]
      then
         cmd="exekutor ./build-test ${MULLE_TECHNICAL_FLAGS}"
      else
         if [ ! -d ".mulle/share/sde" ]
         then
            log_debug "No .mulle/share/sde folder and no build-test script, so don't run craft"
            return
         fi

         # shellcheck source=src/mulle-test-craft.sh
         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-craft.sh"

         cmd="test_craft_main"

      fi
   fi

   eval `mulle-sde tool-env` || exit 1

   [ -z "${DEPENDENCY_DIR}" ] && internal_fail "DEPENDENCY_DIR not set"
   [ -z "${KITCHEN_DIR}" ]    && internal_fail "KITCHEN_DIR not set"

   log_verbose "Craft test dependencies"

   ${cmd} "$@"
}


test_do_run()
{
   log_entry "test_do_run" "$@"

   local cmd

   log_verbose "Run tests"


   if [ -x "./run-test" ]
   then
      cmd="exekutor ./run-test ${MULLE_TECHNICAL_FLAGS}"
   else
      # shellcheck source=src/mulle-test-run.sh
      . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-run.sh"

      cmd="test_run_main"
   fi

   eval `mulle-sde tool-env` || exit 1

   [ -z "${DEPENDENCY_DIR}" ] && internal_fail "DEPENDENCY_DIR not set"
   [ -z "${KITCHEN_DIR}" ]    && internal_fail "KITCHEN_DIR not set"

   ${cmd} "$@"
}


exec_in_subshell_if_needed()
{
   log_entry "exec_in_subshell_if_needed" "$@"

   if [ "${MULLE_VIRTUAL_ROOT}" != "${PWD}" ]
   then
      if [ ! -z "${MULLE_TEST_DIR}" ]
      then
         exekutor cd "${MULLE_TEST_DIR}" || exit 1
      fi
      if [ -d "${PWD}/.mulle/share/env" ]
      then
         exekutor exec mulle-sde ${MULLE_TECHNICAL_FLAGS} \
                           run mulle-test ${MULLE_TECHNICAL_FLAGS} "$@"
      else
         fail "Not a proper initialized test directory (${PWD#${MULLE_USER_PWD}/})
${C_INFO}To initialize for mulle-test:
${C_RESET_BOLD}   mulle-test init"
      fi
   else
      log_debug "Already in proper subshell ($MULLE_VIRTUAL_ROOT)"
   fi
}


get_quickstatus()
{
   log_entry "get_quickstatus" "$@"

   local rval

   rexekutor "${MULLE_CRAFT:-mulle-craft}" -s \
                  ${MULLE_TECHNICAL_FLAGS} \
               quickstatus
   rval=$?

   if [ $rval -eq 1 ]
   then
      exit 1
   fi

   return $rval
}


run_or_rerun()
{
   log_entry "get_quickstatus" "$@"

   local cmd="$1"; shift

   if ! get_quickstatus
   then
      test_do_craft || return 1
   fi

   if [ "${cmd}" = "rerun" ]
   then
      test_do_run --rerun "$@"
   else
      test_do_run "$@"
   fi
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NONE"
   local MULLE_FLAG_IGNORE_GRAVEYARD="NO"

   # technical flags
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"
   local SANITIZER
   local MULLE_FLAG_DEFER="DEFAULT"
   local FLAG_OUTSIDE_ENV="NO"

   local BUILD_FLAGS="-f"
   local BUILD_OPTIONS="--clean"
   local RUN_FLAGS
   local RUN_OPTIONS


   case "${MULLE_UNAME}" in
      darwin)
         SANITIZER="gmalloc:testallocator"
      ;;

      *)
         SANITIZER="testallocator"
      ;;
   esac

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         -d|--dir-name)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            MULLE_TEST_DIR="$1"
         ;;

         --valgrind)
            # no others beside  "valgrind"
            SANITIZER="valgrind"
         ;;

         --sanitize-address)
            # no others beside  "address"
            SANITIZER="address"
         ;;

         --sanitize-undefined)
            # no others beside  "undefined"
            SANITIZER="undefined"
         ;;

         --sanitize-thread)
            # no others beside  "thread"
            SANITIZER="thread"
         ;;

         --testallocator)
            r_colon_remove "${SANITIZER}" "testallocator"
            r_colon_remove "${SANITIZER}" "zombie"
            r_colon_concat "${RVAL}" "testallocator"
            SANITIZER="${RVAL}"
         ;;

         --zombie)
            r_colon_remove "${SANITIZER}" "testallocator"
            r_colon_remove "${SANITIZER}" "zombie"
            r_colon_concat "${RVAL}" "zombie"
            SANITIZER="${RVAL}"
         ;;

         --add-sanitizer|--add-memory-checker)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            r_colon_concat "${SANITIZER}" "$1"
            SANITIZER="${RVAL}"
         ;;

         --no-sanitizer|--no-memory-checker)
            SANITIZER=
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   MULLE_TEST_VAR_DIR="${MULLE_TEST_DIR:-${PWD}}/.mulle/var/${MULLE_HOSTNAME}/test"

   if [ "${MULLE_FLAG_LOG_SETTINGS}" = 'YES' ]
   then
      log_trace2 "MULLE_VIRTUAL_ROOT=${MULLE_VIRTUAL_ROOT}"
      log_trace2 "MULLE_USER_PWD=${MULLE_USER_PWD}"
      log_trace2 "MULLE_TEST_VAR_DIR=${MULLE_TEST_VAR_DIR}"
   fi
   #
   # this tells mulle-craft that everything is fine, though
   # .mulle/share/sde/mulle-sde is present, to prevent manual crafting
   # of tests, which is often undesirable
   #
   MULLE_TEST_ENVIRONMENT=YES
   export MULLE_TEST_ENVIRONMENT

   local cmd="$1"

   case "$cmd" in
      "")
         cmd=run
         [ $# -ne 0 ] && shift
      ;;

      -*)
         cmd=run
      ;;

      *)
         case "${cmd}" in
            build|clean|cleanrun|craft|env|init|libexec-dir|linkorder|log\
|rebuild|recraft|rerun|run|test-dir|version)
               shift
            ;;

            /*|.*)
               cmd="run"
            ;;

            *)
               if [ -e "${MULLE_USER_PWD}/${cmd}" ]
               then
                  cmd="run"
               else
                  shift
               fi
            ;;
         esac
      ;;
   esac

   case "${cmd}" in
      craft|build|crun)
         if cd_test_dir
         then
            exec_in_subshell_if_needed "${cmd}" "$@"
         fi

         exekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} \
                           clean "${PROJECT_NAME}" || return $?

         test_do_craft "$@" || return $?

         if [ "${cmd}" = "crun" ]
         then
            run_or_rerun "run" "$@"
         fi
      ;;

      recraft|rebuild|recrun)
         if cd_test_dir
         then
            exec_in_subshell_if_needed "${cmd}" "$@"
         fi

         exekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} \
                           clean all || return $?

         test_do_craft "$@" || return $?

         if [ "${cmd}" = "recrun" ]
         then
            run_or_rerun "run" "$@"
         fi
      ;;

      clean)
         if cd_test_dir
         then
            exec_in_subshell_if_needed "${cmd}" "$@"
         fi

         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-clean.sh"

         test_clean_main "$@"
      ;;

      craftorder)
         if cd_test_dir
         then
            exec_in_subshell_if_needed "${cmd}" "$@"
         fi

         exekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} \
                           craftorder
      ;;

      env)
         rexekutor env | sort
      ;;

      init)
         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-init.sh"
         test_init_main "$@"
      ;;

      libexec-dir)
         printf "%s\n" "${MULLE_TEST_LIBEXEC_DIR}"
         exit 0
      ;;

      linkorder)
         if cd_test_dir
         then
            exec_in_subshell_if_needed "${cmd}" "$@"
         fi

         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-linkorder.sh"

         test_linkorder_main "$@"
      ;;

      log)
         if cd_test_dir
         then
            exec_in_subshell_if_needed "${cmd}" "$@"
         fi

         exekutor mulle-sde ${MULLE_TECHNICAL_FLAGS} \
                           log "$@"
      ;;

      run|rerun)
         if cd_test_dir
         then
            exec_in_subshell_if_needed "${cmd}" "$@"
         fi

         run_or_rerun "${cmd}" "$@"
      ;;

      test-dir)
         # shellcheck source=src/mulle-test-locate.sh
         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-locate.sh"

         r_locate_main "$@"
         printf "%s\n" "${RVAL}"
      ;;

      version)
         printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         exit 0
      ;;

      *)
         log_error "Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}


#
#
#
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   # mingw stuff
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions-env not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   r_get_libexec_dir "$0" "mulle-test" "mulle-test-run.sh"
   MULLE_TEST_LIBEXEC_DIR="${RVAL}"

   #
   # dependent on gcc again here, but on linux in a i386 docker the
   # arch is x86_64 but we want i386 which we only get from gcc I think
   # (or maybe apt, but gcc seems more cross-platformy)
   #
   MULLE_ARCH="`gcc -v 2>&1  | sed -n -e '/Target:/s/.*: \([^-]*\)-.*/\1/p'`"
   MULLE_ARCH="${MULLE_ARCH:-`arch 2> /dev/null`}"
   MULLE_ARCH="${MULLE_ARCH:-x86_64}"

   #
   # minimal setup exit
   #
   if [ "$#" -eq 1 ]
   then
      case "$1" in
         "arch")
            printf "%s\n" "${MULLE_ARCH}"
            exit 0
         ;;

         "uname")
            printf "%s\n" "${MULLE_UNAME}"
            exit 0
         ;;

         "libexec-dir")
            printf "%s\n" "${MULLE_TEST_LIBEXEC_DIR}"
            exit 0
         ;;
      esac
   fi

   set -o pipefail
   call_main "${MULLE_TEST_FLAGS}" "$@"
}


_init "$@"
