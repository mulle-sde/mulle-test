#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"


MULLE_TEST_VERSION="3.0.1"

# version is in mulle-test-env


usage()
{
   cat <<EOF
Usage:
   ${MULLE_EXECUTABLE_NAME} [flags] <command>

   Run tests.

Flags:
EOF

   options_technical_flags_usage

   cat <<EOF

Commands:
   build     : build libraries for tests
   clean     : remove folders: bin,build,include,lib,libexec,share,Frameworks
   run       : run tests
   test      : first build then run tests
   test-dir  : locate test folder
EOF

   exit 1
}


cd_test_dir()
{
   log_entry "cd_test_dir" "$@"

   local testdir

   # shellcheck source=src/mulle-test-locate.sh
   . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-locate.sh"
   if ! testdir="`locate_main "$@"`"
   then
      fail "Did not find a \"test\" directory"
   fi

   exekutor cd "${testdir}"
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NONE"
   local MULLE_FLAG_IGNORE_GRAVEYARD="NO"

   # technical flags
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   local MULLE_FLAG_DEFER="DEFAULT"
   local FLAG_OUTSIDE_ENV="NO"

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local cmd="$1"
   [ $# -eq 0 ] || shift

   case "${cmd:-test}" in
      build)
         cd_test_dir || exit 1

         # shellcheck source=src/mulle-test-build.sh
         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-build.sh"
         build_main "$@"
      ;;

      clean)
         cd_test_dir || exit 1

         rmdir_safer bin
         rmdir_safer build
         rmdir_safer include
         rmdir_safer lib
         rmdir_safer libexec
         rmdir_safer share
         rmdir_safer Frameworks
      ;;

      run)
         cd_test_dir || exit 1

         # shellcheck source=src/mulle-test-run.sh
         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-run.sh"
         run_main "$@"
      ;;

      test)
         cd_test_dir || exit 1

         if [ -x "build-test" ]
         then
            exekutor ./build-test "$@"
         else
            # shellcheck source=src/mulle-test-build.sh
            . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-build.sh"
            build_main "$@" || exit 1
         fi

         # shellcheck source=src/mulle-test-run.sh
         if [ -x "run-test" ]
         then
            exekutor ./run-test "$@"
         else
            . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-run.sh"

            run_main "$@"
         fi
      ;;

      test-dir)
         # shellcheck source=src/mulle-test-locate.sh
         . "${MULLE_TEST_LIBEXEC_DIR}/mulle-test-locate.sh"
         locate_main "$@"
      ;;

      *)
         log_error "Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}


#
#
#
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
   [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
      echo "mulle-bashfunctions-env not installed" >&2 && \
      exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || exit 1

   local _libexec_dir

   _get_libexec_dir "$0" "mulle-match" "mulle-test-run.sh"

   MULLE_TEST_LIBEXEC_DIR="${_libexec_dir}"

   #
   # minimal setup exit
   #
   if [ "$#" -eq 1 ]
   then
      case "$1" in
         "libexec-dir")
            echo "${MULLE_TEST_LIBEXEC_DIR}"
            exit 0
         ;;
      esac
   fi

   set -o pipefail
}


# mingw stuff
case "$PATH" in
   '\\'*)
      PATH="${PATH//\\/\/}"
   ;;
esac

_init
main "$@"
